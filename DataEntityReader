class COLDataEntityReader
{
    private str dataEntities;
    private str fileContent;
    #File

    protected void new()
    {
    }

    public void readDs()
    {
        List deList = strSplit(dataEntities, ',');
        ListEnumerator enum = deList.getEnumerator();
        
        fileContent = strFmt('%1, %2, %3, %4, %5', 'Entity Name', 'Entity system name', 'Table name', 'Table system name', 'Is child entity');
        while (enum.moveNext())
        {
            str dataEntity = enum.current();
            DictDataEntity dictDE = new DictDataEntity(tableName2Id(dataEntity));
            if (dictDE)
            {
                int cntOfDS = dictDE.datasourceCnt();
                int i = 1;

                for (i = 1; i <= cntOfDS; i++)
                {
                    TableId tableId = dictDE.datasourceID2TableId(i);
                    DictDataEntity dictDeChild = new DictDataEntity(tableId);
                    boolean isEntity = false;
                    if (dictDeChild)
                    {
                        isEntity = true;
                    }
                    fileContent += #delimiterCRLF + strFmt('%1, %2, %3, %4, %5', dictDe.label(), dictDE.name(), tableId2PName(tableId), tableId2Name(tableId), isEntity);
                    
                }

            }
            else
            {
                error (strFmt("Data entity '%1' not found", dataEntity));
            }
        }
    }

    public void endFile()
    {
        if ('' != fileContent)
        {
            File::SendStringAsFileToUser(fileContent, 'DeMetaData.csv');
        }
    }

    public void readFields()
    {
        List deList = strSplit(dataEntities, ',');
        ListEnumerator enum = deList.getEnumerator();
        
        fileContent += #delimiterCRLF + strFmt('%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12', 
            'Entity Name', 'Entity system name', 'Field Name', 'Label', 'Help text', 'Mapped table', 'Mapped field', 'Type', 'String length', 'Is computed field', 'Access modifier', 'Is system field');
        while (enum.moveNext())
        {
            str dataEntity = enum.current();
            TableId dataEntityId = tableName2Id(dataEntity);
            DictDataEntity dictDE = new DictDataEntity(dataEntityId);
            if (dictDE)
            {
    
                int cntOfFld = dictDE.fieldCnt();
                int i = 1;

                for (i = 1; i <= cntOfFld; i++)
                {
                    FieldId fieldId = dictDe.fieldCnt2Id(i);
                    DictDataEntityField dfe = new DictDataEntityField(dataEntityId, fieldId);

                    fileContent += #delimiterCRLF + strFmt('%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12',
                        dictDe.label(), dictDE.name(), dfe.name(), dfe.label(), dfe.help(), dfe.dataSource(), dfe.dataField(), dfe.type(), dfe.stringLen(), dfe.IsComputedField(), dfe.accessModifier(), dfe.isSystem());
                    
                }

            }
            else
            {
                error (strFmt("Data entity '%1' not found", dataEntity));
            }

        }
    }

    public static void main(Args args)
    {
        Dialog dlg = new Dialog();
        DialogField dlf = dlg.addField("Description255", "Data entity name", "Data entity names separated by a comma.");
        if (dlg.run())
        {
            str des = dlf.value();
            COLDataEntityReader reader = new COLDataEntityReader();
            reader.dataEntities= des;
            reader.readDs();
            reader.readFields();
            reader.endFile();
        }
    }

}
